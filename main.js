const { 
    Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, 
    StringSelectMenuBuilder, ActivityType 
} = require('discord.js');
const config = require('./config.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });
const TOKEN = config.token;
const STATUTS = config.statuts

client.once('ready', () => {
    console.log(`Connect√© en tant que ${client.user.tag}`);
    client.user.setPresence({
        activities: [{ name: STATUTS, type: ActivityType.Listening }],
        status: 'dnd', 
    });
});

client.on('interactionCreate', async (interaction) => {
    // Menu de s√©lection pour la cr√©ation de ticket/support
    if (interaction.isStringSelectMenu() && interaction.customId === 'support_select') {
        if (interaction.values[0] === 'ticket') {
            // Cr√©ation d'un thread priv√© pour le ticket
            if (!interaction.channel || !interaction.guild) {
                await interaction.reply({ content: "Erreur : impossible de cr√©er un ticket ici.", ephemeral: true });
                return;
            }
            if (
                !interaction.channel ||
                !interaction.guild ||
                typeof interaction.channel.threads === "undefined"
            ) {
                await interaction.reply({ content: "Erreur : impossible de cr√©er un ticket ici. Utilise cette commande dans un salon textuel du serveur.", ephemeral: true });
                return;
      }
            const thread = await interaction.channel.threads.create({
                name: `ticket-${interaction.user.username}`,
                autoArchiveDuration: 60,
                reason: 'Ticket support',
                type: 12 // ChannelType.PrivateThread
            });
            // Donne l'acc√®s au cr√©ateur du ticket (normalement automatique, mais on le force)
            await thread.members.add(interaction.user.id);

            await thread.send(`Bonjour ${interaction.user}, merci d'expliquer clairement votre demande. Un membre du staff va vous r√©pondre ici.`);
            await interaction.reply({ content: "Votre ticket a √©t√© cr√©√© !", ephemeral: true });
        } else if (interaction.values[0] === 'faq') {
            await interaction.reply({
                content: `FAQ :\n- Les tickets sont trait√©s du lundi au vendredi.\n- Merci de patienter apr√®s votre demande.`,
                ephemeral: true
            });
        }
        return;
    }

    // Menu de s√©lection pour la proc√©dure de recrutement
    if (interaction.isStringSelectMenu() && interaction.customId === 'recrutement_select') {
        let content = '';
        if (interaction.values[0] === 'chapitre1') {
            content = `üî• Chapitre 1 - Les informations requises üî•

1. **Informations globales** üí¨

‚óè Quel √¢ge as-tu ?
‚óè Depuis combien de temps es-tu sur Discord ?
‚óè Combien de temps passes-tu sur Discord/semaine ?
‚óè Quel r√¥le vises-tu ?

2. **Exp√©rience et motivations** üïí

‚óè As-tu d√©j√† fait partie d'un staff ? Si oui, quel.s r√¥le.s as-tu occup√© ?
‚óè (R√©pondre si la r√©ponse pr√©c√©dente est affirmative). Pendant combien de temps as-tu occup√© ce.s r√¥le.s ?
‚óè Pourquoi souhaites-tu faire partie du staff ?
‚óè Pourquoi ce serveur en particulier ?

3. **Mod√©ration** üõ°Ô∏è

‚óè Un conflit d√©bute face √† toi. Que fais-tu ?
‚óè Tu arrives en plein milieu d'un conflit sans en savoir la raison. Que fais-tu ?
‚óè Comment g√®res-tu les critiques n√©gatives ?
‚óè Un ami proche ne respecte pas les r√®gles du serveur. Que fais-tu concr√®tement ?
‚óè Que fais-tu si tu entres en d√©saccord avec un membre du staff ?

4. **D√©tails** üìã

‚óè Combien de temps par jour es-tu pr√™t.e √† consacrer √† ce serveur ?
‚óè Existe-t-il des p√©riodes dans l'ann√©e o√π tu ne pourras pas √™tre disponible ? (vacances, examens, couvre-feu etc).
‚óè D'apr√®s toi, quelles sont les qualit√©s requises pour faire partie du staff ?`;
        } else if (interaction.values[0] === 'chapitre2') {
            content = `üß© Chapitre 2 - Les conditions üß©

1. **S√©curit√© du compte**

‚óè Le compte du postulant doit avoir plus de 5 mois d'existence sur la plateforme Discord.
‚óè Il doit disposer d'une adresse mail v√©rifi√©e, d'une double authentification activ√©e et d'un profil respectant les r√®gles de la communaut√©.

2. **Activit√©s du compte**

‚óè Le postulant doit √™tre un minimum actif sur ce serveur. Le syst√®me de niveau nous permettra de savoir √† quel point il est actif.

3. **Statut de l'utilisateur**

‚óè L'absence d'une quelconque sanction contre le postulant durant les 7 derniers jours.
‚óè Le postulant doit √™tre membre du serveur depuis plus de 13 jours.`;
        } else if (interaction.values[0] === 'chapitre3') {
            content = `üìñ Chapitre 3 - La proc√©dure üìñ

1. **R√©daction d'une demande**
‚óè Elle consistera √† √©crire une demande de recrutement dans laquelle le postulant devra y mettre des informations des chapitres pr√©c√©dents.
2. **Soutenance de la demande**
‚óè Elle sera l'√©tape √† laquelle le postulant devra r√©pondre √† certaines questions de la part du staff existant.`;
        }
        await interaction.reply({ content, ephemeral: true });
        return;
    }
});

client.on('messageCreate', async (message) => {
    if (message.content === config.commands) {
        if (message.author.bot) return;

        const embed = new EmbedBuilder()
            .setTitle('Support')
            .setColor('#808080') 
            .setImage(config.panelImage);

        // Menu de s√©lection pour le recrutement
        const selectRecrutement = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('recrutement_select')
                    .setPlaceholder('Nouvelles recrues')
                    .addOptions(
                        {
                            label: 'Chapitre 1',
                            description: 'Questions sur ton profil et tes motivations',
                            value: 'chapitre1',
                        },
                        {
                            label: 'Chapitre 2',
                            description: 'Conditions pour postuler',
                            value: 'chapitre2',
                        },
                        {
                            label: 'Chapitre 3',
                            description: 'Comment postuler',
                            value: 'chapitre3',
                        }
                    )
            );

        // Menu de s√©lection pour le support/ticket
        const selectSupport = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('support_select')
                    .setPlaceholder('Contactez le support')
                    .addOptions(
                        {
                            label: 'Cr√©er un ticket',
                            description: 'Ouvrir un ticket support',
                            value: 'ticket',
                        },
                        {
                            label: 'FAQ',
                            description: 'Questions fr√©quentes',
                            value: 'faq',
                        }
                    )
            );

        await message.channel.send({ embeds: [embed], components: [selectRecrutement, selectSupport] });
    }
});

client.login(TOKEN);